---
version: "3.9"

x-var:
  - &POSTGRES_USER
    postgres
  - &POSTGRES_PASSWORD
    default
  - &POSTGRES_DATABASE
    postgres


x-postgres-vars: &postgres-vars
  POSTGRES_HOST: database
  POSTGRES_USER: *POSTGRES_USER
  POSTGRES_PASSWORD: *POSTGRES_PASSWORD
  POSTGRES_DATABASE: *POSTGRES_DATABASE

x-python-vars: &python-vars
  PIP_NO_CACHE_DIR: "off"
  PIP_DISABLE_PIP_VERSION_CHECK: "on"
  PIP_DEFAULT_TIMEOUT: 100
  POETRY_VERSION: 1.2.2
  POETRY_HOME: /opt/poetry
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  POETRY_NO_INTERACTION: "1"
  PYSETUP_PATH: /application
  VENV_PATH: /application/.venv
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1
  PYTHONPATH: /application/app/src

services:
  database:
    image: postgres:15
    container_name: database
    environment:
      <<: *postgres-vars
    healthcheck:
      test: ["CMD", "pg_isready", "-U", *POSTGRES_USER]
    ports: ["5432:5432"]

  migrations:
    #entrypoint: /app/venv/bin/python -m alembic upgrade head
    build:
      context: .
      dockerfile: migrations/Dockerfile
    environment:
      <<: *postgres-vars
    depends_on:
      database:
        condition: service_healthy

  backend-py:
    profiles: ["python", "all"]
    image: python:3.12
    container_name: backend-py
    entrypoint: /application/start-local.sh
    volumes: ["./backend:/application", "/application/.venv"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003"]
    environment:
      <<: [*postgres-vars, *python-vars]
    ports: ["3003:3000"]
    depends_on:
      migrations:
        condition: service_completed_successfully

  backend-py-test:
    profiles: ["python", "all"]
    image: python:3.12
    container_name: backend-py-test
    entrypoint: /application/run-unit-tests.sh
    volumes: ["./backend:/application", "/application/.venv"]
    environment:
      <<: [*postgres-vars, *python-vars]
    depends_on:
      backend-py:
        condition: service_healthy

  frontend:
    container_name: frontend
    # entrypoint: sh -c "npm ci && npm run dev"
    #entrypoint: sh -c "npm ci && npm run build"

    # build: 
    #   context: ./frontend/hydro_alerting
    #   dockerfile: Dockerfile
    entrypoint: sh -c "npm ci && npm run start"
    environment:
      NODE_ENV: development
      PORT: 3000
      BACKEND_URL: http://backend-py:3000
    image: node:20-bullseye
    ports: ["4200:4200"]
    volumes: ["./frontend/hydro_alerting:/app", "/app/node_modules"]
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3000"]
    working_dir: "/app"
    # depends_on:
    #   backend-py:
    #     condition: service_healthy

  caddy:
    container_name: caddy
    profiles: ["caddy"]
    build: ./frontend
    environment:
      NODE_ENV: development
      PORT: 3000
      BACKEND_URL: http://backend:3000
      # frontend/hydro_alerting
      LOG_LEVEL: info
    ports: ["3005:3000"]
    volumes: ["./frontend/hydro_alerting/Caddyfile:/etc/caddy/Caddyfile"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
    depends_on:
      backend-py:
        condition: service_healthy

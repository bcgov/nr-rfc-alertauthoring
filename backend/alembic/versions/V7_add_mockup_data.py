"""add mockup data

Revision ID: V6
Revises: V5
Create Date: 2024-01-29 12:28:16.951414

"""
import datetime
import logging
from typing import List, Sequence, Union

import sqlalchemy as sa
import sqlmodel
import src.types
from alembic import op
from src.v1.crud import crud_alerts
from src.v1.models import model

LOGGER = logging.getLogger(__name__)

# revision identifiers, used by Alembic.
revision: str = "V7"
down_revision: Union[str, None] = "V6"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # rename id to alert_id
    bind = op.get_bind()
    session = sqlmodel.Session(bind=bind)

    alert_data_1 = model.Alerts(
        alert_description="Alert Description 1",
        alert_hydro_conditions="Alert Hydro Conditions 1",
        alert_meteorological_conditions="Alert Meteorological Conditions 1",
        author_name="Rocky B.",
        alert_status="active",
    )
    basin_levels_1: list[src.types.AlertAreaLevel] = [
        {"basin": "Haida Gwaii", "alert_level": "High Streamflow Advisory"},
        {"basin": "Western Vancouver Island", "alert_level": "Flood Watch"},
        {"basin": "Central Vancouver Island", "alert_level": "Flood Warning"},
    ]

    alert = crud_alerts.create_alert_with_basins_and_level(
        session=session,
        alert=alert_data_1,
        basin_levels=basin_levels_1,
    )
    LOGGER.debug(f"alert basin {alert.basins}")

    alert_data_2 = model.Alerts(
        alert_description="Alert Description 2",
        alert_hydro_conditions="Alert Hydro Conditions 2",
        alert_meteorological_conditions="Alert Meteorological Conditions 2",
        author_name="Rocky B.",
        alert_status="active",
    )
    basin_levels_2: list[src.types.AlertAreaLevel] = [
        {"basin": "Nechako", "alert_level": "High Streamflow Advisory"},
        {"basin": "Skagit", "alert_level": "Flood Watch"},
        {"basin": "Skeena", "alert_level": "Flood Warning"},
    ]
    alert2 = crud_alerts.create_alert_with_basins_and_level(
        session=session,
        alert=alert_data_2,
        basin_levels=basin_levels_2,
    )
    session.commit()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = sqlmodel.Session(bind=bind)
    sql = "DELETE FROM py_api.alert_areas;"
    op.execute(sql)
    sql = "DELETE FROM py_api.alerts;"
    op.execute(sql)

    pass
    # ### end Alembic commands ###

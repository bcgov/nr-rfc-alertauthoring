"""add mockup data

Revision ID: V6
Revises: V5
Create Date: 2024-01-29 12:28:16.951414

"""

import datetime
import logging
from typing import List, Sequence, Union

import sqlalchemy as sa
import sqlmodel
import src.core.config as app_config
import src.types
import src.v1.models.alerts as alerts_model
from alembic import op
from src.v1.crud import crud_alerts

LOGGER = logging.getLogger(__name__)

# revision identifiers, used by Alembic.
revision: str = "V7"
down_revision: Union[str, None] = "V6"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # rename id to alert_id
    bind = op.get_bind()
    session = sqlmodel.Session(bind=bind)

    alert_data_1 = alerts_model.Alerts(
        alert_description="Alert Description 1",
        alert_hydro_conditions="Alert Hydro Conditions 1",
        alert_meteorological_conditions="Alert Meteorological Conditions 1",
        author_name="Rocky B.",
        alert_status="active",
    )

    alert_data_2 = alerts_model.Alerts(
        alert_description="Alert Description 2",
        alert_hydro_conditions="Alert Hydro Conditions 2",
        alert_meteorological_conditions="Alert Meteorological Conditions 2",
        author_name="Rocky B.",
        alert_status="active",
    )

    basin_levels_1: list[src.types.AlertAreaLevel] = [
        {"basin": "Haida Gwaii", "alert_level": "High Streamflow Advisory"},
        {"basin": "Western Vancouver Island", "alert_level": "Flood Watch"},
        {"basin": "Central Vancouver Island", "alert_level": "Flood Warning"},
    ]

    basin_levels_2: list[src.types.AlertAreaLevel] = [
        {"basin": "Nechako", "alert_level": "High Streamflow Advisory"},
        {"basin": "Skagit", "alert_level": "Flood Watch"},
        {"basin": "Skeena", "alert_level": "Flood Warning"},
    ]

    # create the alert records

    # create the relationships
    cnt = 1
    for record in ((alert_data_1, basin_levels_1), (alert_data_2, basin_levels_2)):
        alert_data = record[0]
        related_data = record[1]
        sql1 = (
            f"insert into {app_config.Configuration.DEFAULT_SCHEMA}.alerts "
            + "(alert_description, alert_hydro_conditions, alert_meteorological_conditions, author_name, alert_status, alert_created, alert_updated ) "
            + "VALUES "
            + f"( '{alert_data.alert_description}', '{alert_data.alert_hydro_conditions}', '{alert_data.alert_meteorological_conditions}', '{alert_data.author_name}', '{alert_data.alert_status}', current_timestamp, current_timestamp )  "
        )
        op.execute(sql1)
        # now create the related data
        for related_record in related_data:
            basin_name = related_record["basin"]
            alert_level = related_record["alert_level"]

            sql2 = (
                f"insert into {app_config.Configuration.DEFAULT_SCHEMA}.alert_areas "
                + " (alert_id, basin_id, alert_level_id) "
                + f" select alert_id, "
                + f"   (select basin_id from {app_config.Configuration.DEFAULT_SCHEMA}.basins where basin_name = '{basin_name}' ) as basin_id, "
                + f"   (select alert_level_id from {app_config.Configuration.DEFAULT_SCHEMA}.alert_levels where alert_level = '{alert_level}' ) as alert_level_id "
                + f" from {app_config.Configuration.DEFAULT_SCHEMA}.alerts where alert_description = '{alert_data.alert_description}' "
            )
            op.execute(sql2)

    # alert = crud_alerts.create_alert_with_basins_and_level(
    #     session=session,
    #     alert=alert_data_1,
    #     basin_levels=basin_levels_1,
    # )
    # LOGGER.debug(f"**************** alert basin {alert}")
    # for link_atr in alert.alert_links:
    #     LOGGER.debug(f"**************** alert basin {link_atr.basin}")
    #     LOGGER.debug(f"**************** alert level {link_atr.alert_level}")
    #     LOGGER.debug(f"**************** alert {link_atr.alert}")

    # alert2 = crud_alerts.create_alert_with_basins_and_level(
    #     session=session,
    #     alert=alert_data_2,
    #     basin_levels=basin_levels_2,
    # )
    session.commit()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = sqlmodel.Session(bind=bind)
    sql = f"DELETE FROM {app_config.Configuration.DEFAULT_SCHEMA}.alert_areas;"
    op.execute(sql)
    sql = f"DELETE FROM {app_config.Configuration.DEFAULT_SCHEMA}.alerts;"
    op.execute(sql)

    pass
    # ### end Alembic commands ###
